# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None
#####################################
#Recursion Method#
# 1.inorder traversal#
class Solution:
    def inorderTraversal(self, root: TreeNode) -> List[int]:
        if not root:
            
            return []
        res= []
        self.inorder(root, res)
        return res
    def inorder(self, root, res):
        if root:
            self.inorder(root.left,res)
            res.append(root.val)
            self.inorder(root.right,res)
            
 # 2.preorder traversal#
 class Solution:
    def preorderTraversal(self, root: TreeNode) -> List[int]:
        if not root:
            
            return []
        res= []
        self.preorder(root, res)
        return res
    def preorder(self, root, res):
        if root:
            res.append(root.val)
            self.preorder(root.left,res)
            self.preorder(root.right,res)
            
  # 3.postorder traversal#
 class Solution:
    def postorderTraversal(self, root: TreeNode) -> List[int]:
        if not root:
            
            return []
        res= []
        self.postorder(root, res)
        return res
    def postorder(self, root, res):
        if root:
            self.postorder(root.left,res)
            self.postorder(root.right,res)
            res.append(root.val)

 # 4.level traversal#
 class Solution:
    def postorderTraversal(self, root: TreeNode) -> List[int]:
         res = []
        if not root:
            
            return [];
        def helper(node, level):
            
            if len(res)== level:
                res.append([])
            
            res[level].append(node.val)
        
            if node.left:
                helper(node.left, level+1)
            if node.right:
                helper(node.right, level+1)
    
        helper(root,0)
        return res
